[{"title":"Git 基础操作","url":"/2023/12/06/Git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/","content":"1 初始化本地 Git 仓库git init\n\n2 把所有文件都加入到暂存区git add .\n\n3 本地提交更新git commit -m &quot;init project&quot;\n\n4 查看分支git branch\n\n5 创建 test 分支git checkout -b test\n\n6 将本地的 test 分支进行本地的 commit 提交git add .git commit -m &quot;完成了 test 的开发&quot;\n\n7 将本地的 test 分支推送到远程仓库进行保存git push -u origin test\n\n8 将本地的 test 分支合并到本地的 main 分支git checkout mastergit merge tabbar\n9 删除本地的 test 分支git branch -d test\n\n10 将本地的 main 分支推送到远程仓库进行保存git push","categories":["Git","Git 基础"],"tags":["Git","笔记"]},{"title":"Vue2 中 Vant 组件库的基本使用方法","url":"/2023/12/07/Vue2%E4%B8%ADVant%E7%BB%84%E4%BB%B6%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/","content":"1 安装1.1 Vant2 组件库地址&emsp;&emsp;https://vant-contrib.gitee.io/vant/v2/#/zh-CN\n1.2 通过 npm 安装# Vue 2 项目，安装 Vant 2：npm i vant@latest-v2 -S\n2 引入组件2.1 按需导入# 1.安装插件npm i babel-plugin-import -D\n\n// 2.babel.config.js中配置module.exports = &#123;  presets: [    &#x27;@vue/cli-plugin-babel/preset&#x27;  ],  plugins: [    [&#x27;import&#x27;, &#123;      libraryName: &#x27;vant&#x27;,      libraryDirectory: &#x27;es&#x27;,      style: true    &#125;, &#x27;vant&#x27;]  ]&#125;\n\n// 3.新建/src/utils/vant-ui.jsimport Vue from &#x27;vue&#x27;import &#123; Button, Switch &#125; from &#x27;vant&#x27;Vue.use(Button)Vue.use(Switch)\n// 4.main.js中import Vue from &#x27;vue&#x27;;import &#x27;@/utils/vant-ui.js&#x27;\n\n// 5.页面中使用测试&lt;van-button type=&quot;primary&quot;&gt;主要按钮&lt;/van-button&gt;\n\n2.2 全部导入// 1.main.js中import Vue from &#x27;vue&#x27;;import Vant from &#x27;vant&#x27;;import &#x27;vant/lib/index.css&#x27;;// 插件安装初始化，内部会将所有的vant组件进行导入注册Vue.use(Vant);\n// 2.页面中使用测试&lt;van-button type=&quot;primary&quot;&gt;主要按钮&lt;/van-button&gt;","categories":["Vue2","Vant 组件库"],"tags":["Vue2","Vant 组件库"]},{"title":"Vue2 中 router/index.js 基础配置","url":"/2023/12/07/Vue2%E4%B8%ADrouter-index-js%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/","content":"// /src/router/index.js 基础配置import Vue from &#x27;vue&#x27;import VueRouter from &#x27;vue-router&#x27;import HomeView from &#x27;../views/HomeView.vue&#x27;Vue.use(VueRouter)const routes = [  &#123;    path: &#x27;/&#x27;,    name: &#x27;home&#x27;,    component: HomeView  &#125;,  &#123;    path: &#x27;/about&#x27;,    name: &#x27;about&#x27;,    // route level code-splitting    // this generates a separate chunk (about.[hash].js) for this route    // which is lazy-loaded when the route is visited.    component: () =&gt;      import(/* webpackChunkName: &quot;about&quot; */ &#x27;../views/AboutView.vue&#x27;)  &#125;]const router = new VueRouter(&#123;  routes&#125;)export default router\n\nimport Vue from &#x27;vue&#x27;import VueRouter from &#x27;vue-router&#x27;import Login from &#x27;@/views/login&#x27;import Layout from &#x27;@/views/layout&#x27;import Search from &#x27;@/views/search&#x27;import MyOrder from &#x27;@/views/myorder&#x27;import Pay from &#x27;@/views/pay&#x27;import ProDetail from &#x27;@/views/prodetail&#x27;import SearchList from &#x27;@/views/search/list&#x27;import Home from &#x27;@/views/layout/home.vue&#x27;import Cart from &#x27;@/views/layout/cart.vue&#x27;import Category from &#x27;@/views/layout/category.vue&#x27;import User from &#x27;@/views/layout/user.vue&#x27;Vue.use(VueRouter)const routes = [  &#123;    path: &#x27;/login&#x27;,    component: Login  &#125;,  &#123;    path: &#x27;/&#x27;,    component: Layout,    redirect: &#x27;/home&#x27;,    children: [      &#123; path: &#x27;home&#x27;, component: Home &#125;,      &#123; path: &#x27;cart&#x27;, component: Cart &#125;,      &#123; path: &#x27;user&#x27;, component: User &#125;,      &#123; path: &#x27;category&#x27;, component: Category &#125;    ]  &#125;,  &#123;    path: &#x27;/search&#x27;,    component: Search  &#125;,  &#123;    path: &#x27;/pay&#x27;,    component: Pay  &#125;,  &#123;    path: &#x27;/myorder&#x27;,    component: MyOrder  &#125;,  &#123;    path: &#x27;/prodetail:id&#x27;,    component: ProDetail  &#125;,  &#123;    path: &#x27;/searchlist&#x27;,    component: SearchList  &#125;]const router = new VueRouter(&#123;  routes&#125;)export default router","categories":["Vue2","Vue2 基础"],"tags":["Vue2","vue-router"]},{"title":"XR-FRAME - 基础能力 - Geometry基础图形","url":"/2023/12/11/XR-FRAME-%E5%9F%BA%E7%A1%80%E8%83%BD%E5%8A%9B-Geometry%E5%9F%BA%E7%A1%80%E5%9B%BE%E5%BD%A2/","content":"1 项目地址官方项目地址：https://github.com/dtysky/xr-frame-demo/tree/master/miniprogram/components/xr-basic\n2 代码解析主要代码：\n&lt;xr-scene id=&quot;xr-scene&quot; bind:ready=&quot;handleReady&quot;&gt;  &lt;xr-assets bind:progress=&quot;handleAssetsProgress&quot; bind:loaded=&quot;handleAssetsLoaded&quot;&gt;    &lt;xr-asset-material asset-id=&quot;standard-mat&quot; effect=&quot;standard&quot; /&gt;  &lt;/xr-assets&gt;  &lt;xr-node&gt;    &lt;xr-mesh node-id=&quot;mesh-plane&quot; position=&quot;0 -0.02 -4&quot; rotation=&quot;0 0 0&quot; scale=&quot;5 1 5&quot; geometry=&quot;plane&quot; material=&quot;standard-mat&quot; uniforms=&quot;u_baseColorFactor:0.48 0.78 0.64 1&quot; receive-shadow&gt;&lt;/xr-mesh&gt;    &lt;xr-mesh id=&quot;cube&quot; node-id=&quot;mesh-cube&quot; position=&quot;-1 0.5 -3.5&quot; scale=&quot;1 1 1&quot; rotation=&quot;0 45 0&quot; geometry=&quot;cube&quot; material=&quot;standard-mat&quot; uniforms=&quot;u_baseColorFactor:0.298 0.764 0.85 1&quot; cast-shadow&gt;&lt;/xr-mesh&gt;    &lt;xr-mesh node-id=&quot;mesh-cylinder&quot; position=&quot;1 0.7 -3.5&quot; scale=&quot;1 0.7 1&quot; geometry=&quot;cylinder&quot; material=&quot;standard-mat&quot; uniforms=&quot;u_baseColorFactor:1 0.776 0.364 1&quot; cast-shadow&gt;&lt;/xr-mesh&gt;    &lt;xr-mesh node-id=&quot;mesh-sphere&quot; position=&quot;0 1.25 -5&quot; scale=&quot;1.25 1.25 1.25&quot; geometry=&quot;sphere&quot; material=&quot;standard-mat&quot; uniforms=&quot;u_baseColorFactor:0.937 0.176 0.368 1&quot; cast-shadow&gt;&lt;/xr-mesh&gt;    &lt;xr-camera      id=&quot;camera&quot; node-id=&quot;camera&quot; position=&quot;0 1.6 0&quot; clear-color=&quot;0.925 0.925 0.925 1&quot;      target=&quot;mesh-sphere&quot;      camera-orbit-control=&quot;&quot;    &gt;&lt;/xr-camera&gt;  &lt;/xr-node&gt;  &lt;xr-node node-id=&quot;lights&quot;&gt;    &lt;xr-light type=&quot;ambient&quot; color=&quot;1 1 1&quot; intensity=&quot;1&quot; /&gt;    &lt;xr-light type=&quot;directional&quot; rotation=&quot;40 170 0&quot; color=&quot;1 1 1&quot; intensity=&quot;3&quot; cast-shadow/&gt;  &lt;/xr-node&gt;&lt;/xr-scene&gt;\n\n2.1 xr-scene&emsp;&emsp;对于所有的 xr-frame 小程序组件，其最外层必须有一个xr-scene标签作为根元素，并且组件内只能有一个，以此作为整个组件的基础。&emsp;&emsp;在编写组件时，常常用到的那个 this.scene，其实就是这个元素。&emsp;&emsp;可用来添加事件，如 ready 事件，场景第一次解析完毕。\n2.2 xr-assets&emsp;&emsp;用于包裹所需要加载的资源，可以绑定事件。\n2.3 xr-asset-material&emsp;&emsp;材质：asset-id 为材质的 id，可以用于给下面的 xr-mesh 进行绑定；effect 用于指定材质的效果，一般选 standard 即可。\n2.4 xr-mesh&emsp;&emsp;网格：geometry 用于指定所要加载的物体的形状；node-id 为物体的 id，可以用于给 xr-camera 进行绑定，以确定相机朝向；material 可以用于绑定对应的材质 id；uniforms 是渲染相关的属性；cast-shadow 用于产生阴影，receive-shadow 用于接收其他物体产生的阴影，并且需要给灯光也开启 cast-shadow 效果。\n2.5 xr-camera&emsp;&emsp;相机：clear-color 为相机底色；target 为相机朝向，可以绑定相应物体的 id；camera-orbit-control，相机控制器组件提供了一个简单的绕着相机 target 旋转的控制方式，一般而言只需要在元素上添加 camera-orbit-control 属性即可。\n2.6 xr-light&emsp;&emsp;灯光：type，灯光类型；color，灯光颜色；intensity，灯光亮度；rotation，灯光方向；cast-shadow，允许灯光产生阴影效果，只有主平行光能够产生阴影，相对应的 receive-shadow 去接收阴影。\n","categories":["微信小程序","xr-frame"],"tags":["微信小程序","xr-frame"]},{"title":"XR-FRAME 案例 2DMarker+视频，让照片动起来","url":"/2023/12/07/XR-FRAME%E6%A1%88%E4%BE%8B2DMarker-%E8%A7%86%E9%A2%91%EF%BC%8C%E8%AE%A9%E7%85%A7%E7%89%87%E5%8A%A8%E8%B5%B7%E6%9D%A5/","content":"1 官网与项目地址&emsp;&emsp;xr-frame 官网：https://developers.weixin.qq.com/miniprogram/dev/framework/xr-frame/\n&emsp;&emsp;官方项目地址：https://github.com/dtysky/xr-frame-demo/tree/master/miniprogram/components/xr-classic-video\n2 创建小程序2.1 新建一个小程序项目\n2.2 修改 app.json新增如下代码，如已有，请忽略该步骤\n&quot;lazyCodeLoading&quot;: &quot;requiredComponents&quot;\n2.3 修改目录文件\n2.4 修改文件内容xr.json中\n&#123;  &quot;component&quot;: true,  &quot;renderer&quot;: &quot;xr-frame&quot;,  &quot;usingComponents&quot;: &#123;&#125;&#125;\n\nxr.wxml中\n&lt;xr-scene&gt;  &lt;xr-camera clear-color=&quot;0.4 0.8 0.6 1&quot; /&gt;&lt;/xr-scene&gt;\n\nindex.json中\n&#123;  &quot;usingComponents&quot;: &#123;    &quot;xr&quot;: &quot;../../components/xr/xr&quot;  &#125;,  &quot;disableScroll&quot;: true&#125;\n\nindex.js中\nPage(&#123;  data: &#123;    width: 300,    height: 300,    renderWidth: 300,    renderHeight: 300,  &#125;,  onLoad() &#123;    const info = wx.getSystemInfoSync();    const width = info.windowWidth;    const height = info.windowHeight;    const dpi = info.pixelRatio;    this.setData(&#123;      width, height,      renderWidth: width * dpi,      renderHeight: height * dpi    &#125;);  &#125;,&#125;)\n\nindex.wxml中\n&lt;view&gt;  &lt;xr-start    disable-scroll    id=&quot;main-frame&quot;    width=&quot;&#123;&#123;renderWidth&#125;&#125;&quot;    height=&quot;&#123;&#123;renderHeight&#125;&#125;&quot;    style=&quot;width:&#123;&#123;width&#125;&#125;px;height:&#123;&#123;height&#125;&#125;px;&quot;  /&gt;&lt;/view&gt;\n\n3 主要代码3.1 xr.wxml代码&lt;!-- ar-system, xr-ar-tracker切换为了Marker模式，xr-camera设置成了is-ar-camera --&gt;&lt;xr-scene ar-system=&quot;modes:Marker&quot; bind:ready=&quot;handleReady&quot;&gt;  &lt;xr-assets bind:loaded=&quot;handleAssetsLoaded&quot;&gt;    &lt;!-- 加载视频 --&gt;   &lt;xr-asset-load      type=&quot;video-texture&quot; asset-id=&quot;hikari&quot;      src=&quot;https://mmbizwxaminiprogram-1258344707.cos.ap-guangzhou.myqcloud.com/xr-frame/demo/xr-frame-team/2dmarker/hikari-v.mp4&quot; options=&quot;loop:true&quot;    /&gt;    &lt;xr-asset-material asset-id=&quot;mat&quot; effect=&quot;simple&quot; uniforms=&quot;u_baseColorMap: video-hikari&quot; /&gt;  &lt;/xr-assets&gt;  &lt;!-- 视频加载完成。再显示内容，对应于handleAssetsLoaded函数 --&gt;  &lt;xr-node wx:if=&quot;&#123;&#123;loaded&#125;&#125;&quot;&gt;    &lt;!-- ar-tracker-switch事件：监测对图片的追踪状态，仅仅在追踪到/追踪中切换，识别到了为true，否则为false --&gt;    &lt;xr-ar-tracker mode=&quot;Marker&quot; src=&quot;https://mmbizwxaminiprogram-1258344707.cos.ap-guangzhou.myqcloud.com/xr-frame/demo/xr-frame-team/2dmarker/hikari.jpg&quot; bind:ar-tracker-switch=&quot;handleTrackerSwitch&quot;&gt;      &lt;xr-mesh node-id=&quot;mesh-plane&quot; geometry=&quot;plane&quot; material=&quot;mat&quot; /&gt;    &lt;/xr-ar-tracker&gt;    &lt;xr-camera      id=&quot;camera&quot; node-id=&quot;camera&quot; position=&quot;1 1 1&quot; clear-color=&quot;0.925 0.925 0.925 1&quot;      background=&quot;ar&quot; is-ar-camera    /&gt;  &lt;/xr-node&gt;&lt;/xr-scene&gt;\n\n3.2 xr.js代码// components/xr/xr.jsComponent(&#123;  data: &#123;    loaded: false  &#125;,  methods: &#123;    handleReady: function(&#123;detail&#125;) &#123;      this.scene = detail.value;    &#125;,    handleAssetsLoaded: function (&#123;detail&#125;) &#123;      this.setData(&#123;loaded: true&#125;);    &#125;,    handleTrackerSwitch: function (&#123;detail&#125;) &#123;      // active为Boolean, true为识别到，false为未识别到      const active = detail.value;      const video = this.scene.assets.getAsset(&#x27;video-texture&#x27;, &#x27;hikari&#x27;);      // 通过active来控制视频的播放      active ? video.play() : video.stop();    &#125;  &#125;&#125;)","categories":["微信小程序","xr-frame"],"tags":["微信小程序","xr-frame"]},{"title":"Axios 封装","url":"/2023/12/10/axios%E5%B0%81%E8%A3%85/","content":"1 安装 Axios官网：https://www.axios-http.cn/\nnpm i axios\n\n2 新建 request 模块在 utils 文件夹下新建 request.js 文件\n3 创建实例 &amp; 配置，导出实例/* 封装axios用于发送请求 */import axios from &#x27;axios&#x27;// 创建一个新的axios实例const request = axios.create(&#123;  baseURL: &#x27;http://......&#x27;,  timeout: 5000&#125;)// 添加请求拦截器request.interceptors.request.use(  function (config) &#123;    // 在发送请求之前做些什么    return config  &#125;,  function (error) &#123;    // 对请求错误做些什么    return Promise.reject(error)  &#125;)// 添加响应拦截器request.interceptors.response.use(  function (response) &#123;    // 对响应数据做点什么    return response.data  &#125;,  function (error) &#123;    // 对响应错误做点什么    return Promise.reject(error)  &#125;)export default request\n\n4 测试使用4.1 组件中调用&lt;script&gt;import request from &#x27;@/utils/request.js&#x27;export default &#123;  name: &#x27;LoginPage&#x27;，  created() &#123;    this.test()  &#125;,  methods: &#123;    async test() &#123;      const res = await request.get(&#x27;/login/test&#x27;)      console.log(res)    &#125;  &#125;&#125;&lt;/script&gt;\n\n4.2 新建 api 模块新建 &#x2F;api&#x2F;test.js 文件\nimport request from &#x27;@/utils/request.js&#x27;// 按需导出export const getTest = () =&gt; &#123;  return request.get(&#x27;/login/test&#x27;)&#125;\n\n4.3 修改组件内容&lt;script&gt;import &#123; getTest &#125; from &#x27;@/api/test.js&#x27;export default &#123;  name: &#x27;LoginPage&#x27;，  created() &#123;    this.test()  &#125;,  methods: &#123;    async test() &#123;      const res = await getTest()      console.log(res)    &#125;  &#125;&#125;&lt;/script&gt;","categories":["Vue2","Vue2 基础"],"tags":["Vue2","Axios"]},{"title":"Toast 轻提示","url":"/2023/12/10/toast%E8%BD%BB%E6%8F%90%E7%A4%BA/","content":"1 注册安装官网：https://vant-contrib.gitee.io/vant/v2/#/zh-CN/toast\nimport &#123; Toast &#125; from &#x27;vant&#x27;Vue.use(Toast)\n\n2 两种使用方式2.1 导入调用组件内 或 非组件中 均可\nimport &#123; Toast &#125; from &#x27;vant&#x27;Toast(&#x27;提示内容&#x27;)Toast.success(&#x27;成功文案&#x27;)\n\n2.2 通过 this 直接调用必须组件内本质：全局引入 Toast 组件后，会自动将方法注册挂载到了 Vue 原型上 Vue.prototype.$toast = xxx\nthis.$toast(&#x27;提示内容&#x27;)this.$toast.success(&#x27;成功文案&#x27;)","categories":["Vue2","Vant 组件库"],"tags":["Vue2","Vant 组件库","Toast"]},{"title":"Vuex 构建子模块","url":"/2023/12/12/vuex%E6%9E%84%E5%BB%BA%E5%AD%90%E6%A8%A1%E5%9D%97/","content":"1 新建 user.js 子模块新建 &#x2F;store&#x2F;modules&#x2F;user.js 文件\nexport default &#123;  namespaced: true,  state() &#123;    return &#123;      userInfo: &#123;        token: &#x27;&#x27;,        userId: &#x27;&#x27;      &#125;    &#125;  &#125;,  mutations: &#123;&#125;,  actions: &#123;&#125;&#125;\n\n2 挂载到 vuex 上import Vue from &#x27;vue&#x27;import Vuex from &#x27;vuex&#x27;import user from &#x27;./modules/user&#x27;Vue.use(Vuex)export default new Vuex.Store(&#123;  modules: &#123;    user  &#125;&#125;)\n\n3 提供 mutationsmutations: &#123;  setUserInfo (state, obj) &#123;    state.userInfo = obj  &#125;,&#125;,\n\n4 页面中 commit 调用// 登录按钮（校验 &amp; 提交）async login () &#123;  if (!this.validFn()) &#123;    return  &#125;  ...  const res = await codeLogin(this.mobile, this.msgCode)  this.$store.commit(&#x27;user/setUserInfo&#x27;, res.data)  this.$router.push(&#x27;/&#x27;)  this.$toast(&#x27;登录成功&#x27;)&#125;","categories":["Vue2","Vue2 基础"],"tags":["Vue2","Vuex"]},{"title":"使用 Vant 组件库实现底部导航 Tabbar","url":"/2023/12/08/%E4%BD%BF%E7%94%A8vant%E7%BB%84%E4%BB%B6%E5%BA%93%E5%AE%9E%E7%8E%B0%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AAtabbar/","content":"1 vant-ui,js 按需引入官方地址：https://vant-contrib.gitee.io/vant/v2/#/zh-CN/tabbar\nicon图标：https://vant-contrib.gitee.io/vant/v2/#/zh-CN/icon\nimport Vue from &#x27;vue&#x27;;import &#123; Tabbar, TabbarItem &#125; from &#x27;vant&#x27;;Vue.use(Tabbar)Vue.use(TabbarItem)\n\n2 组件中使用&lt;van-tabbar v-model=&quot;active&quot; active-color=&quot;#ee0a24&quot; inactive-color=&quot;#000&quot;&gt;  &lt;van-tabbar-item icon=&quot;home-o&quot;&gt;标签&lt;/van-tabbar-item&gt;  &lt;van-tabbar-item icon=&quot;search&quot;&gt;标签&lt;/van-tabbar-item&gt;  &lt;van-tabbar-item icon=&quot;friends-o&quot;&gt;标签&lt;/van-tabbar-item&gt;  &lt;van-tabbar-item icon=&quot;setting-o&quot;&gt;标签&lt;/van-tabbar-item&gt;&lt;/van-tabbar&gt;\n\n&lt;!-- 路由模式 --&gt;&lt;router-view /&gt;&lt;van-tabbar route&gt;  &lt;van-tabbar-item replace to=&quot;/home&quot; icon=&quot;home-o&quot;&gt;标签&lt;/van-tabbar-item&gt;  &lt;van-tabbar-item replace to=&quot;/search&quot; icon=&quot;search&quot;&gt;标签&lt;/van-tabbar-item&gt;&lt;/van-tabbar&gt;","categories":["Vue2","Vant 组件库"],"tags":["Vue2","Vant 组件库","Tabbar"]},{"title":"使用 Vant 组件库实现顶部导航栏 Navbar","url":"/2023/12/08/%E4%BD%BF%E7%94%A8vant%E7%BB%84%E4%BB%B6%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%A1%B6%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8Fnavbar/","content":"1 vant-ui,js 按需引入官方地址：https://vant-contrib.gitee.io/vant/v2/#/zh-CN/nav-bar\nimport Vue from &#x27;vue&#x27;;import &#123; NavBar &#125; from &#x27;vant&#x27;;Vue.use(NavBar);\n\n2 组件中使用&lt;van-nav-bar  title=&quot;标题&quot;  left-text=&quot;返回&quot;  right-text=&quot;按钮&quot;  left-arrow  @click-left=&quot;$router.go(-1)&quot;  @click-right=&quot;onClickRight&quot;/&gt;\n\n3 修改样式// 设置导航条 返回箭头 颜色.van-nav-bar &#123;  .van-icon-arrow-left &#123;    color: #333;  &#125;&#125;","categories":["Vue2","Vant 组件库"],"tags":["Vue2","Vant 组件库","Navbar"]},{"title":"使用定时器倒计时","url":"/2023/12/10/%E4%BD%BF%E7%94%A8%E5%AE%9A%E6%97%B6%E5%99%A8%E5%80%92%E8%AE%A1%E6%97%B6/","content":"&lt;button @click=&quot;getCode&quot;&gt;  &#123;&#123;    second === totalSecond ? &#x27;获取验证码&#x27; : second + &#x27;秒后重新发送&#x27;  &#125;&#125;&lt;/button&gt;&lt;script&gt;export default &#123;  name: &#x27;LoginPage&#x27;,  data() &#123;    return &#123;      totalSecond: 60, // 总秒数      second: 60, // 当前秒数，开定时器对 second--      timer: null // 定时器 id    &#125;  &#125;,  // 离开页面清除定时器  destroyed() &#123;    clearInterval(this.timer)  &#125;,  methods: &#123;    // 获取短信验证码    getCode() &#123;      // 开启倒计时      if (this.timer || this.second !=== this.totalSecond) return      this.timer = setInterval(() =&gt; &#123;        this.second--        if (this.second &lt;= 0) &#123;          clearInterval(this.timer)          this.timer = null // 重置定时器 id          this.second = this.totalSecond // 归位        &#125;      &#125;, 1000)    &#125;  &#125;&#125;&lt;/script&gt;\n","categories":["Vue2","Vue2 基础"],"tags":["Vue2","定时器"]},{"title":"响应拦截器统一处理错误","url":"/2023/12/12/%E5%93%8D%E5%BA%94%E6%8B%A6%E6%88%AA%E5%99%A8%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/","content":"1 配置 Axios参考方法：Axios 封装\n2 配置响应拦截器import &#123; Toast &#125; from &#x27;vant&#x27;...// 添加响应拦截器request.interceptors.response.use(function (response) &#123;  const res = response.data  if (res.status !== 200) &#123;    // 给提示    Toast(res.message)    // 抛出一个错误的Promise    return Promise.reject(res.message)  &#125;  // 对响应数据做点什么  return res&#125;, function (error) &#123;  // 对响应错误做点什么  return Promise.reject(error)&#125;)\n","categories":["Vue2","Vue2 基础"],"tags":["Vue2","Axios"]},{"title":"基于 postcss 插件实现项目 vw 配置","url":"/2023/12/07/%E5%9F%BA%E4%BA%8Epostcss%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E9%A1%B9%E7%9B%AEvw%E9%85%8D%E7%BD%AE/","content":"1 安装1.1 postcss官方地址&emsp;&emsp;https://vant-contrib.gitee.io/vant/v2/#/zh-CN/advanced-usage#liu-lan-qi-gua-pei\n1.2 通过 npm 安装npm i postcss-px-to-viewport@1.1.1 -D\n2 引入组件// 新建postcss.config.jsmodule.exports = &#123;  plugins: &#123;    &#x27;postcss-px-to-viewport&#x27;: &#123;      // vw适配的标准屏的宽度，iphoneX      viewportWidth: 375    &#125;  &#125;&#125;\n\n// 组件中，直接按照px写就可以适配不同屏幕&lt;template&gt;  &lt;div id=&quot;app&quot;&gt;    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;style lang=&quot;less&quot;&gt;  .box &#123;    width: 200px;    height: 300px;    background-color: pink;  &#125;&lt;/style&gt;","categories":["Vue2","Vant 组件库"],"tags":["Vue2","Vant 组件库","postcss"]},{"title":"新建 Vue2 项目的步骤","url":"/2023/12/07/%E6%96%B0%E5%BB%BAVue2%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%AD%A5%E9%AA%A4/","content":"1 安装脚手架 VueClinpm install -g @vue/cli\n\n2 自定义新建项目vue create 项目名称\n\n&emsp;&emsp;选择项：Manually select features; Babel, Router, Vuex, Linter &#x2F; Foratter; 2.x; n(hash); Less; EsLint + Prettier; Lint on save; In dedicated config files; no(no save this as a preset for futuer projects).\ncd 项目名称npm run serve\n\n3 配置 EsLint 和 Prettier3.1 .eslintrc.js文件module.exports = &#123;  root: true,  env: &#123;    node: true  &#125;,  extends: [    &#x27;plugin:vue/essential&#x27;,    &#x27;eslint:recommended&#x27;,    &#x27;plugin:prettier/recommended&#x27;  ],  parserOptions: &#123;    parser: &#x27;@babel/eslint-parser&#x27;  &#125;,  rules: &#123;    &#x27;prettier/prettier&#x27;: [      &#x27;warn&#x27;,      &#123;        singleQuote: true, // 单引号        semi: false, // 无分号        printWidth: 80, // 每行宽度至多80字符        trailingComma: &#x27;none&#x27;, // 不加对象|数组最后逗号        endOfLine: &#x27;auto&#x27; // 换行符号不限制（win mac 不一致）      &#125;    ],    &#x27;vue/multi-word-component-names&#x27;: [      &#x27;warn&#x27;,      &#123;        ignores: [&#x27;index&#x27;] // vue组件名称多单词组成（忽略index.vue）      &#125;    ],    &#x27;vue/no-setup-props-destructure&#x27;: [&#x27;off&#x27;], // 关闭 props 解构的校验    // 💡 添加未定义变量错误提示，create-vue@3.6.3 关闭，这里加上是为了支持下一个章节演示。    &#x27;no-undef&#x27;: &#x27;error&#x27;  &#125;&#125;\n3.2 .eslintignore文件node_modulesdist\n\n3.3 .prettierrc.json文件&#123;  &quot;$schema&quot;: &quot;https://json.schemastore.org/prettierrc&quot;,  &quot;semi&quot;: false,  &quot;tabWidth&quot;: 2,  &quot;singleQuote&quot;: true,  &quot;printWidth&quot;: 100,  &quot;trailingComma&quot;: &quot;none&quot;&#125;\n\n3.4 .prettierignore文件node_modulesdistsrc/assetspackage-lock.jsons\n\n3.5 VSCode 扩展开启情况&emsp;&emsp;开启：ESLint, Auto Close Tag, Auto Rename Tag, Error Lens, Vetur\n","categories":["Vue2","Vue2 基础"],"tags":["Vue2"]},{"title":"项目与 Github 连接的步骤","url":"/2023/12/06/%E9%A1%B9%E7%9B%AE%E4%B8%8Egithub%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%AD%A5%E9%AA%A4/","content":"1 进入 Github ，新建仓库1.1 点击 New repository\n1.2 填写 Repository name 和 Description ，之后点击 Create repository\n\n\n2 使用 Git 管理自己的项目2.1 初始化本地 Git 仓库git init\n2.2 在项目根目录中新建 .gitignore 忽略文件，并配置如下# 忽略 node_modules 目录/node_modules\n\n2.3 将所有文件都存入暂存区git add .\n\n2.4 本地提交更新git comit -m &quot;init project&quot;\n2.5 把项目托管到 Github 上git remote add origin git@github.com:banlixxx/test.gitgit branch -M maingit push -u origin main","categories":["Git","Git 基础"],"tags":["Git","笔记","Github"]}]