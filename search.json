[{"title":"Vue2 中 Vant 组件库的基本使用方法","url":"/2023/12/07/Vue2%E4%B8%ADVant%E7%BB%84%E4%BB%B6%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/","content":"1 安装1.1 Vant2 组件库地址&emsp;&emsp;https://vant-contrib.gitee.io/vant/v2/#/zh-CN\n1.2 通过 npm 安装# Vue 2 项目，安装 Vant 2：npm i vant@latest-v2 -S\n2 引入组件2.1 按需导入# 1.安装插件npm i babel-plugin-import -D\n\n// 2.babel.config.js中配置module.exports = &#123;  presets: [    &#x27;@vue/cli-plugin-babel/preset&#x27;  ],  plugins: [    [&#x27;import&#x27;, &#123;      libraryName: &#x27;vant&#x27;,      libraryDirectory: &#x27;es&#x27;,      style: true    &#125;, &#x27;vant&#x27;]  ]&#125;\n\n// 3.新建/src/utils/vant-ui.jsimport Vue from &#x27;vue&#x27;import &#123; Button, Switch &#125; from &#x27;vant&#x27;Vue.use(Button)Vue.use(Switch)\n// 4.main.js中import Vue from &#x27;vue&#x27;;import &#x27;@/utils/vant-ui.js&#x27;\n\n// 5.页面中使用测试&lt;van-button type=&quot;primary&quot;&gt;主要按钮&lt;/van-button&gt;\n\n2.2 全部导入// 1.main.js中import Vue from &#x27;vue&#x27;;import Vant from &#x27;vant&#x27;;import &#x27;vant/lib/index.css&#x27;;// 插件安装初始化，内部会将所有的vant组件进行导入注册Vue.use(Vant);\n// 2.页面中使用测试&lt;van-button type=&quot;primary&quot;&gt;主要按钮&lt;/van-button&gt;","categories":["Vue2","Vant 组件库"],"tags":["Vue2","Vant 组件库"]},{"title":"Git 基础操作","url":"/2023/12/06/Git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/","content":"1 初始化本地 Git 仓库git init\n\n2 把所有文件都加入到暂存区git add .\n\n3 本地提交更新git commit -m &quot;init project&quot;\n\n4 查看分支git branch\n\n5 创建 test 分支git checkout -b test\n\n6 将本地的 test 分支进行本地的 commit 提交git add .git commit -m &quot;完成了 test 的开发&quot;\n\n7 将本地的 test 分支推送到远程仓库进行保存git push -u origin test\n\n8 将本地的 test 分支合并到本地的 main 分支git checkout mastergit merge tabbar\n9 删除本地的 test 分支git branch -d test\n\n10 将本地的 main 分支推送到远程仓库进行保存git push","categories":["Git","Git 基础"],"tags":["Git","笔记"]},{"title":"Vue2 中 router/index.js 基础配置","url":"/2023/12/07/Vue2%E4%B8%ADrouter-index-js%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/","content":"// /src/router/index.js 基础配置import Vue from &#x27;vue&#x27;import VueRouter from &#x27;vue-router&#x27;import HomeView from &#x27;../views/HomeView.vue&#x27;Vue.use(VueRouter)const routes = [  &#123;    path: &#x27;/&#x27;,    name: &#x27;home&#x27;,    component: HomeView  &#125;,  &#123;    path: &#x27;/about&#x27;,    name: &#x27;about&#x27;,    // route level code-splitting    // this generates a separate chunk (about.[hash].js) for this route    // which is lazy-loaded when the route is visited.    component: () =&gt;      import(/* webpackChunkName: &quot;about&quot; */ &#x27;../views/AboutView.vue&#x27;)  &#125;]const router = new VueRouter(&#123;  routes&#125;)export default router","categories":["Vue2","Vue2 基础"],"tags":["Vue2","vue-router"]},{"title":"基于 postcss 插件实现项目 vw 配置","url":"/2023/12/07/%E5%9F%BA%E4%BA%8Epostcss%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E9%A1%B9%E7%9B%AEvw%E9%85%8D%E7%BD%AE/","content":"1 安装1.1 postcss官方地址&emsp;&emsp;https://vant-contrib.gitee.io/vant/v2/#/zh-CN/advanced-usage#liu-lan-qi-gua-pei\n1.2 通过 npm 安装npm i postcss-px-to-viewport@1.1.1 -D\n2 引入组件// 新建postcss.config.jsmodule.exports = &#123;  plugins: &#123;    &#x27;postcss-px-to-viewport&#x27;: &#123;      // vw适配的标准屏的宽度，iphoneX      viewportWidth: 375    &#125;  &#125;&#125;\n\n// 组件中，直接按照px写就可以适配不同屏幕&lt;template&gt;  &lt;div id=&quot;app&quot;&gt;    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;style lang=&quot;less&quot;&gt;  .box &#123;    width: 200px;    height: 300px;    background-color: pink;  &#125;&lt;/style&gt;","categories":["Vue2","Vant 组件库"],"tags":["Vue2","Vant 组件库","postcss"]},{"title":"XR-FRAME 案例 2DMarker+视频，让照片动起来","url":"/2023/12/07/XR-FRAME%E6%A1%88%E4%BE%8B2DMarker-%E8%A7%86%E9%A2%91%EF%BC%8C%E8%AE%A9%E7%85%A7%E7%89%87%E5%8A%A8%E8%B5%B7%E6%9D%A5/","content":"1 官网与项目地址&emsp;&emsp;xr-frame 官网：https://developers.weixin.qq.com/miniprogram/dev/framework/xr-frame/\n&emsp;&emsp;官方项目地址：https://github.com/dtysky/xr-frame-demo/tree/master/miniprogram/components/xr-classic-video\n2 创建小程序2.1 新建一个小程序项目\n2.2 修改 app.json新增如下代码，如已有，请忽略该步骤\n&quot;lazyCodeLoading&quot;: &quot;requiredComponents&quot;\n2.3 修改目录文件\n2.4 修改文件内容xr.json中\n&#123;  &quot;component&quot;: true,  &quot;renderer&quot;: &quot;xr-frame&quot;,  &quot;usingComponents&quot;: &#123;&#125;&#125;\n\nxr.wxml中\n&lt;xr-scene&gt;  &lt;xr-camera clear-color=&quot;0.4 0.8 0.6 1&quot; /&gt;&lt;/xr-scene&gt;\n\nindex.json中\n&#123;  &quot;usingComponents&quot;: &#123;    &quot;xr&quot;: &quot;../../components/xr/xr&quot;  &#125;,  &quot;disableScroll&quot;: true&#125;\n\nindex.js中\nPage(&#123;  data: &#123;    width: 300,    height: 300,    renderWidth: 300,    renderHeight: 300,  &#125;,  onLoad() &#123;    const info = wx.getSystemInfoSync();    const width = info.windowWidth;    const height = info.windowHeight;    const dpi = info.pixelRatio;    this.setData(&#123;      width, height,      renderWidth: width * dpi,      renderHeight: height * dpi    &#125;);  &#125;,&#125;)\nindex.wxml中\n&lt;view&gt;  &lt;xr-start    disable-scroll    id=&quot;main-frame&quot;    width=&quot;&#123;&#123;renderWidth&#125;&#125;&quot;    height=&quot;&#123;&#123;renderHeight&#125;&#125;&quot;    style=&quot;width:&#123;&#123;width&#125;&#125;px;height:&#123;&#123;height&#125;&#125;px;&quot;  /&gt;&lt;/view&gt;\n\n3 主要代码3.1 xr.wxml&lt;!-- ar-system, xr-ar-tracker切换为了Marker模式，xr-camera设置成了is-ar-camera --&gt;&lt;xr-scene ar-system=&quot;modes:Marker&quot; bind:ready=&quot;handleReady&quot;&gt;  &lt;xr-assets bind:loaded=&quot;handleAssetsLoaded&quot;&gt;    &lt;!-- 加载视频 --&gt;   &lt;xr-asset-load      type=&quot;video-texture&quot; asset-id=&quot;hikari&quot;      src=&quot;https://mmbizwxaminiprogram-1258344707.cos.ap-guangzhou.myqcloud.com/xr-frame/demo/xr-frame-team/2dmarker/hikari-v.mp4&quot; options=&quot;loop:true&quot;    /&gt;    &lt;xr-asset-material asset-id=&quot;mat&quot; effect=&quot;simple&quot; uniforms=&quot;u_baseColorMap: video-hikari&quot; /&gt;  &lt;/xr-assets&gt;  &lt;!-- 视频加载完成。再显示内容，对应于handleAssetsLoaded函数 --&gt;  &lt;xr-node wx:if=&quot;&#123;&#123;loaded&#125;&#125;&quot;&gt;    &lt;!-- ar-tracker-switch事件：监测对图片的追踪状态，仅仅在追踪到/追踪中切换，识别到了为true，否则为false --&gt;    &lt;xr-ar-tracker mode=&quot;Marker&quot; src=&quot;https://mmbizwxaminiprogram-1258344707.cos.ap-guangzhou.myqcloud.com/xr-frame/demo/xr-frame-team/2dmarker/hikari.jpg&quot; bind:ar-tracker-switch=&quot;handleTrackerSwitch&quot;&gt;      &lt;xr-mesh node-id=&quot;mesh-plane&quot; geometry=&quot;plane&quot; material=&quot;mat&quot; /&gt;    &lt;/xr-ar-tracker&gt;    &lt;xr-camera      id=&quot;camera&quot; node-id=&quot;camera&quot; position=&quot;1 1 1&quot; clear-color=&quot;0.925 0.925 0.925 1&quot;      background=&quot;ar&quot; is-ar-camera    /&gt;  &lt;/xr-node&gt;&lt;/xr-scene&gt;\n\n3.2 xr.js// components/xr/xr.jsComponent(&#123;  data: &#123;    loaded: false  &#125;,  methods: &#123;    handleReady: function(&#123;detail&#125;) &#123;      this.scene = detail.value;    &#125;,    handleAssetsLoaded: function (&#123;detail&#125;) &#123;      this.setData(&#123;loaded: true&#125;);    &#125;,    handleTrackerSwitch: function (&#123;detail&#125;) &#123;      // active为Boolean, true为识别到，false为未识别到      const active = detail.value;      const video = this.scene.assets.getAsset(&#x27;video-texture&#x27;, &#x27;hikari&#x27;);      // 通过active来控制视频的播放      active ? video.play() : video.stop();    &#125;  &#125;&#125;)","categories":["微信小程序","xr-frame"],"tags":["微信小程序","xr-frame"]},{"title":"新建 Vue2 项目的步骤","url":"/2023/12/07/%E6%96%B0%E5%BB%BAVue2%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%AD%A5%E9%AA%A4/","content":"1 安装脚手架 VueClinpm install -g @vue/cli\n\n2 自定义新建项目vue create 项目名称\n\n&emsp;&emsp;选择项：Manually select features; Babel, Router, Vuex, Linter &#x2F; Foratter; 2.x; n(hash); Less; EsLint + Prettier; Lint on save; In dedicated config files; no(no save this as a preset for futuer projects).\ncd 项目名称npm run serve\n\n3 配置 EsLint 和 Prettier3.1 .eslintrc.js文件module.exports = &#123;  root: true,  env: &#123;    node: true  &#125;,  extends: [    &#x27;plugin:vue/essential&#x27;,    &#x27;eslint:recommended&#x27;,    &#x27;plugin:prettier/recommended&#x27;  ],  parserOptions: &#123;    parser: &#x27;@babel/eslint-parser&#x27;  &#125;,  rules: &#123;    &#x27;prettier/prettier&#x27;: [      &#x27;warn&#x27;,      &#123;        singleQuote: true, // 单引号        semi: false, // 无分号        printWidth: 80, // 每行宽度至多80字符        trailingComma: &#x27;none&#x27;, // 不加对象|数组最后逗号        endOfLine: &#x27;auto&#x27; // 换行符号不限制（win mac 不一致）      &#125;    ],    &#x27;vue/multi-word-component-names&#x27;: [      &#x27;warn&#x27;,      &#123;        ignores: [&#x27;index&#x27;] // vue组件名称多单词组成（忽略index.vue）      &#125;    ],    &#x27;vue/no-setup-props-destructure&#x27;: [&#x27;off&#x27;], // 关闭 props 解构的校验    // 💡 添加未定义变量错误提示，create-vue@3.6.3 关闭，这里加上是为了支持下一个章节演示。    &#x27;no-undef&#x27;: &#x27;error&#x27;  &#125;&#125;\n3.2 .eslintignore文件node_modulesdist\n\n3.3 .prettierrc.json文件&#123;  &quot;$schema&quot;: &quot;https://json.schemastore.org/prettierrc&quot;,  &quot;semi&quot;: false,  &quot;tabWidth&quot;: 2,  &quot;singleQuote&quot;: true,  &quot;printWidth&quot;: 100,  &quot;trailingComma&quot;: &quot;none&quot;&#125;\n\n3.4 .prettierignore文件node_modulesdistsrc/assetspackage-lock.jsons\n\n3.5 VSCode 扩展开启情况&emsp;&emsp;开启：ESLint, Auto Close Tag, Auto Rename Tag, Error Lens, Vetur\n","categories":["Vue2","Vue2 基础"],"tags":["Vue2"]},{"title":"项目与 Github 连接的步骤","url":"/2023/12/06/%E9%A1%B9%E7%9B%AE%E4%B8%8Egithub%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%AD%A5%E9%AA%A4/","content":"1 进入 Github ，新建仓库1.1 点击 New repository\n1.2 填写 Repository name 和 Description ，之后点击 Create repository\n\n\n2 使用 Git 管理自己的项目2.1 初始化本地 Git 仓库git init\n2.2 在项目根目录中新建 .gitignore 忽略文件，并配置如下# 忽略 node_modules 目录/node_modules\n\n2.3 将所有文件都存入暂存区git add .\n\n2.4 本地提交更新git comit -m &quot;init project&quot;\n2.5 把项目托管到 Github 上git remote add origin git@github.com:banlixxx/test.gitgit branch -M maingit push -u origin main","categories":["Git","Git 基础"],"tags":["Git","笔记","Github"]}]